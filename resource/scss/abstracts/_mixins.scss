@use "sass:map";
@use "sass:meta";
@use "./functions" as func;
@use "./primitives" as prim;
@use "./variables" as var;

@mixin mq($key-or-size, $direction: "max") {
  $breakpoints: var.$breakpoints;

  @if (meta.type-of($key-or-size) == "string") {
    $size: map.get($breakpoints, $key-or-size);
    @media (#{$direction}-width: #{$size}px) {
      @content;
    }
  } @else if (meta.type-of($key-or-size) == "number") {
    @media (#{$direction}-width: #{$key-or-size}px) {
      @content;
    }
  } @else {
    @error "No found breakpoint: #{$key-or-size}";
  }
}

@mixin setupTypography($items) {
  $fillable: "fs", "fm", "lh", "ls", "fw";
  $breakpoints: var.$breakpoints;

  @each $key, $map in $items {
    @each $size, $value in $map {
      .#{prim.$app-id}-#{$key}-#{$size} {
        @if (map.has-key($value, "fs")) {
          font-size: map.get($value, "fs");
        }
        @if (map.has-key($value, "fm")) {
          font-family: map.get($value, "fm");
        }
        @if (map.has-key($value, "lh")) {
          line-height: map.get($value, "lh");
        }
        @if (map.has-key($value, "ls")) {
          letter-spacing: map.get($value, "ls");
        }
        @if (map.has-key($value, "fw")) {
          font-weight: map.get($value, "fw");
        }
      }
    }
  }
}

@mixin generateResponsiveVars($vars) {
  $breakpoints: var.$breakpoints;
  $pointList: map.keys($breakpoints);

  @each $key, $map in $vars {
    $tk: func.recursive($map);

    @if ($key == default) {
      @each $name, $value in $tk {
        --#{$name}: #{$value};
      }
    } @else if($key in $pointList) {
      @include mq($key) {
        @each $name, $value in $tk {
          --#{$name}: #{$value};
        }
      }
    }
  }
}

@mixin generateVars($map, $prefix: null) {
  $vars: func.recursive($map);

  @each $key, $value in $vars {
    $identifier: if($prefix == null, "--", "--#{$prefix}-");
    #{$identifier}#{$key}: #{$value};
  }
}

@mixin generateThemeVars($themes) {
  @each $name, $map in $themes {
    @if ($name != default) {
      $vars: func.recursive($map);

      html[data-theme="#{$name}"] {
        @each $key, $value in $vars {
          --clr-#{$key}: #{$value};
        }
      }
    }
  }
}

@mixin mq-max($key-or-size) {
  @include mq($key-or-size, "max") {
    @content;
  }
}

@mixin mq-min($key-or-size) {
  @include mq($key-or-size, "min") {
    @content;
  }
}

@mixin flex-center() {
  display: flex;
  align-items: center;
  justify-content: center;
}

@mixin blind() {
  position: absolute;
  clip: rect(0 0 0 0);
  width: 1px;
  height: 1px;
  margin: -1px;
  overflow: hidden;
}

@mixin pos-center() {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
}

@mixin line-clamp($line) {
  overflow: hidden;
  text-overflow: ellipsis;
  -webkit-box-orient: vertical;
  display: -webkit-box;
  -webkit-line-clamp: $line;
}

@mixin img-cover() {
  width: 100%;
  height: 100%;
  object-fit: cover;
}

@mixin img-auto-cover($percent: 56.25%) {
  position: relative;
  overflow: hidden;
  height: 0;
  padding-bottom: $percent;

  img {
    @include pos-center();
    object-fit: cover;
  }
}

@mixin backdrop($opacity: 0.45) {
  @include pos-center();
  background: rgba(0, 0, 0, $opacity);
}
